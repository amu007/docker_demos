input { # 表示输⼊
 file { # 以⽂件的⽅式输⼊
 path => ["/var/www/webapp/logs/showcase-consumer/showcase-consu
mer.log"] # 这⾥配置⽂件的路径，可以多个，也可以使⽤通配符
 type => "bumblebee" # 配置类型
 start_position => "beginning" # ⽂件匹配的位置 beginning和e
nd可选
 codec => multiline { # 是否进⾏多⾏匹配
 pattern => "^%{TIMESTAMP_ISO8601} " # 多⾏匹配的标识是什么，这⾥使
⽤了logstash的内置对象 TIMESTAM_ISO8601 表示的是以⽇期时间开头， ⽐如 2017-03-
11 12:00:00
 negate => true # ⼀个选择开关，可以正向匹配和
反向匹配，true表示不匹配
 what => previous # what有两个值可选 previous和
next，配合negate使⽤，当上⾯配置为true表示不必配的时候这⼀⾏的⽇志怎么处理，previo
us表示和上⼀⾏的⽇志进⾏合并
 }
 }
 file { # 另⼀个⽂件输⼊
 path => ["/var/www/webapp/logs/showcase-consumer/gc.log"] # 路
径
 start_position => "beginning" # 匹配的位置
 type => "bum-gc" # 配置类型
 }
}
filter { # 过滤器
 if [type] == "bumblebee" { # 根据上⾯的类型判断是否需要过滤
 grok {
 match => [ # 使⽤ruby的正则表达式进⾏匹配
 "message", "^%{TIMESTAMP_ISO8601:timestamp} (?<level>(?
:DEBUG)) ([\[]?)(?<module>(?:[a-zA-Z0-9\-]+))([\,]?)(?<traceId>(?:[\[azA-Z0-9]+))([\,]?)(?<spanId>(?:[a-zA-Z0-9]+))([\,]?)(?<spanExport>(?:[\
w]+))([\]]?) %{NUMBER:PID} ([\-]*) ([\[]?)(?<thread>(?:[a-zA-Z0-9\-]+))
([\]]) (?<logger>(?m:.*))$",
 "message", "^%{TIMESTAMP_ISO8601:timestamp} (?<level>(?
:ERROR)) ([\[]?)(?<module>(?:[a-zA-Z0-9\-]+))([\,]?)(?<traceId>(?:[\[azA-Z0-9]+))([\,]?)(?<spanId>(?:[a-zA-Z0-9]+))([\,]?)(?<spanExport>(?:[\
w]+))([\]]?) %{NUMBER:PID} ([\-]*) ([\[]?)(?<thread>(?:[a-zA-Z0-9\-]+))
([\]]) (?<stacktrace>(?m:.*))$"
 ]
 }
 }
}
output { # 输出
 elasticsearch { # 表示输出到elasticsearch
 hosts => ["172.31.22.58:9200"] # elasticsearch的服务器地址，可以配
置多个
 index => "logstash-%{type}" # 建⽴的索引名称，使⽤了上⾯定义的⽂
件类型
 user => elastic # 配置elasticsearch的⽤户名，当ela
stic配置了⽤户信息
 password => Abc123_ # 配置elasticsearch的密码
 }
}
正则表达正确性可以去